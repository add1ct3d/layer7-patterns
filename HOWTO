Hello.  This is a guide for writing patterns for l7-filter.

*** File Format ***

A pattern file consists of the name of the protocol on one line followed by 
a regular expression defining that protocol.  Lines starting with # and 
blank lines are ignored.

*** Regular Expressions ***

At the moment, l7-filter uses a somewhat limited regexp implementation. 
For instance, you cannot use (foo){3} to match "foofoofoo".  Nor can you
use \013 to match ASCII octal 13.  Read the existing patterns for
examples of what works.  We hope to eventually support identical syntax
to GNU grep.  Unfortunately, bringing this fuctionality into kernel
space is difficult.

l7-filter is case insensitive.  Using upper case in your patterns is
identical to using lower case. (Note that in versions <= 0.1.4, upper
case characters in patterns never match.)

l7-filter strips out nulls (0x00 bytes) in the packets it reads so that it can
treat them as normal C strings.  Therefore, you can't match on nulls.  Also,
fields may appear shorter than expected.  For example, if a protocol has a 
4 byte field and some of those bytes can be null, the field can appear to
be any length from 0 to 4.

*** What the filter sees ***

The data to be matched is that of both the client and the server, in the
order that it passes through the computer.  For instance, in FTP, the
first thing the filter sees is "221 server ready", then "USER bob", then
"331 send password", then "PASS frogbeard", and so on.

At the moment, l7-filter cannot match across packets.  Therefore, our
FTP pattern is "220.*ftp|331.*password".  We plan to implement matching
across packets Real Soon Now.  Once this is done, the pattern for FTP
will be "200.*USER.*331" (read ftp.pat for why this is better).

*** What makes a good pattern ***

A pattern must be neither too specific nor not specific enough.  

Example 1: "bear" for Bearshare is not specific enough.  This pattern
could match a wide variety of non-Bearshare connections.  For instance a
HTTP request for http://bear.com would be matched.

Example 2: "220 .*ftp.*(\[.*\]|\(.*\))" for FTP is too specific.  Not
all servers send ()s or []s after their 220.  In fact, servers are not
required to send the string "ftp" at any time, but the vast majority
do.  Good judgement and testing is necessary for instances such as this.

The recommended procedure for writing packets is this:

1) Find and read the spec for the protocol you wish to match.  If it's
an Internet standard, http://rfc-editor.org is a good place to start,
although not all standards are RFCs.  If it is a proprietary protocol,
it is likely that someone has written a reverse-engineered spec for it
anyway.  Do a general web search to find it.  Skipping this step is a
good way to write patterns that are overly specific!

2) Use Ethereal (http://www.ethereal.com/) to watch packets of this
protocol go by in a typical session of its use.  (If you failed to find
a spec for your protocol, but Ethereal can parse it, reading the
Ethereal source code may be worth your time.)

3) Write a pattern that will reliably match one of the first few packets
that are sent in your protocol.  Test it.

4) Send your pattern to l7-filter-developers@lists.sf.net for it to be
incorporated into the official pattern definitions.
